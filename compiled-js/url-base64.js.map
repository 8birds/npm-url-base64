{"version":3,"file":"url-base64.js","sourceRoot":"","sources":["../url-base64.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH;;;;;;;;;;;GAWG;AAEH,MAAM,cAAc,GAAU,kEAAkE,CAAC;AAMjG,SAAS,yBAAyB;IAC9B,IAAI,OAAO,GAAW,EAAE,CAAC;IACzB,KAAI,IAAI,CAAC,GAAU,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE;QAChD,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAEnC,OAAO,OAAO,CAAC;AACnB,CAAC;AAED,MAAM,gBAAgB,GAAW,yBAAyB,EAAE,CAAC,CAAC,sBAAsB;AAEpF,SAAS,kBAAkB,CAAC,GAAU;IAClC,IAAI,MAAM,GAAU,EAAE,CAAC;IAEvB,IAAI,SAAS,GAAU,CAAC,CAAC;IACzB,IAAI,GAAG,GAAU,CAAC,CAAC;IACnB,IAAI,QAAQ,GAAU,CAAC,CAAC;IAExB,OAAM,SAAS,GAAG,GAAG,CAAC,MAAM,EAAC;QACzB,GAAG,KAAK,CAAC,CAAC;QACV,GAAG,IAAI,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC;QACxB,QAAQ,IAAI,CAAC,CAAC;QAEd,OAAM,QAAQ,IAAI,CAAC,EAAC;YAChB,IAAI,KAAK,GAAU,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;YAClD,QAAQ,IAAI,CAAC,CAAC;YACd,MAAM,IAAI,cAAc,CAAC,KAAK,CAAC,CAAC;SACnC;KACJ;IAED,IAAG,QAAQ,GAAG,CAAC,EAAC;QACZ,IAAI,KAAK,GAAU,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,8DAA8D;QACjH,MAAM,IAAI,cAAc,CAAC,KAAK,CAAC,CAAC;KACnC;IAED,OAAO,MAAM,CAAC;AAClB,CAAC;AAqCG,gDAAkB;AAnCtB,SAAS,cAAc,CAAC,SAAgB;IACpC,IAAI,MAAM,GAAU,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,iDAAiD;IAEvG,IAAI,GAAG,GAAU,CAAC,CAAC;IACnB,IAAI,QAAQ,GAAU,CAAC,CAAC;IACxB,IAAI,KAAY,CAAC;IACjB,IAAI,GAAG,GAAU,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;IACpC,IAAI,UAAU,GAAU,CAAC,CAAC;IAE1B,KAAI,IAAI,CAAC,GAAU,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;QAC5C,IAAI,QAAQ,GAAU,SAAS,CAAC,CAAC,CAAC,CAAC;QAEnC,KAAK,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QACnC,IAAG,KAAK,KAAK,SAAS;YAClB,MAAM,IAAI,KAAK,CAAC,iCAAiC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;QAE9E,QAAQ,IAAI,CAAC,CAAC;QACd,GAAG,KAAK,CAAC,CAAC;QACV,GAAG,IAAI,KAAK,CAAC;QAEb,IAAG,QAAQ,IAAI,CAAC,EAAC;YACb,IAAI,IAAI,GAAU,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;YAExC,GAAG,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;YAEvB,QAAQ,IAAI,CAAC,CAAC;YACd,UAAU,EAAE,CAAC;SAChB;KACJ;IAED,OAAO,GAAG,CAAC;AACf,CAAC;AAGG,wCAAc","sourcesContent":["/*\n * Copyright 2018 8 Birds Video Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * This is a non-standard URL-safe, base-64 representation.\n *\n * It is always padded to byte boundaries.\n *\n * All standard Base64 characters are used, except '+' is replaced with '-' and\n * '/' is replaced with '_'.\n *\n * Any remaining bits at the end of the base-64 string are discarded, and are set to 0.\n *\n * No padding character is used.\n */\n\nconst urlBase64Chars:string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\n\ninterface CharMap{\n    [key: string]: number\n}\n\nfunction createReverseUrlBase64Map() : CharMap{\n    let charMap:CharMap = {};\n    for(let i:number = 0; i < urlBase64Chars.length; i++)\n        charMap[urlBase64Chars[i]] = i;\n\n    return charMap;\n}\n\nconst reverseBase64Map:CharMap = createReverseUrlBase64Map(); // char => digit value\n\nfunction convertToUrlBase64(buf:Buffer) : string{\n    let base64:string = '';\n\n    let usedBytes:number = 0;\n    let num:number = 0;\n    let usedBits:number = 0;\n\n    while(usedBytes < buf.length){\n        num <<= 8;\n        num |= buf[usedBytes++];\n        usedBits += 8;\n\n        while(usedBits >= 6){\n            let digit:number = 0x3F & (num >> (usedBits - 6));\n            usedBits -= 6;\n            base64 += urlBase64Chars[digit];\n        }\n    }\n\n    if(usedBits > 0){\n        let digit:number = 0x3F & (num << (6 - usedBits)); //unused bits are 0 (used only to pad to a multiple of 6 bits)\n        base64 += urlBase64Chars[digit];\n    }\n\n    return base64;\n}\n\nfunction parseUrlBase64(urlBase64:string) : Buffer{\n    let bufLen:number = (urlBase64.length * 6 / 8) >>> 0; // '>>> 0' to truncate to unsigned 32-bit integer\n\n    let num:number = 0;\n    let usedBits:number = 0;\n    let digit:number;\n    let buf:Buffer = new Buffer(bufLen);\n    let wroteBytes:number = 0;\n\n    for(let i:number = 0; i < urlBase64.length; i++){\n        let digitStr:string = urlBase64[i];\n\n        digit = reverseBase64Map[digitStr];\n        if(digit === undefined)\n            throw new Error('Invalid url-base64 character \\'' + urlBase64[i] + '\\'.');\n\n        usedBits += 6;\n        num <<= 6;\n        num |= digit;\n\n        if(usedBits >= 8){\n            let byte:number = num >> (usedBits - 8);\n\n            buf[wroteBytes] = byte;\n\n            usedBits -= 8;\n            wroteBytes++;\n        }\n    }\n\n    return buf;\n}\n\nexport {\n    parseUrlBase64,\n    convertToUrlBase64\n}\n"]}